"""
Utils Module

This module provides utility functions for the reader package.
"""

import base64
import json
import os
from urllib.parse import urlparse
from PIL import Image
import io
from dotenv import load_dotenv
import re

def load_api_key():
    """
    .env dosyasından Gemini API anahtarını yükler.
    
    Returns:
        str: Gemini API anahtarı
    """
    load_dotenv()
    
    # Gemini API anahtarını al ve ortam değişkenine ayarla
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
    os.environ["GOOGLE_API_KEY"] = GEMINI_API_KEY
    
    print(f"Gemini API anahtarı yüklendi: {'Evet' if GEMINI_API_KEY else 'Hayır'}")
    return GEMINI_API_KEY

def correct_json_format(text):
    """
    Gemini'den gelen metni düzgün JSON formatına dönüştürür.
    
    Args:
        text (str): Gemini'den gelen metin
        
    Returns:
        str: Düzeltilmiş JSON metni
    """
    # Markdown kod bloklarını temizle
    text = text.replace('```json', '').replace('```', '').strip()
    
    # Başlangıç ve bitiş süslü parantezlerini bul
    start_idx = text.find('{')
    end_idx = text.rfind('}')
    
    if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
        # Sadece JSON kısmını al
        text = text[start_idx:end_idx+1]
    
    # Tek tırnak yerine çift tırnak kullan
    text = text.replace("'", '"')
    
    # Türkçe ve özel karakterleri düzelt - özellikle John Nash"in gibi durumlarda çift tırnak içinde çift tırnak sorununu çöz
    text = text.replace('"in', "'in")  # "in" özel durumu için (örn. "John Nash"in")
    text = text.replace('"nin', "'nin")  # "nin" özel durumu için
    text = text.replace('"den', "'den")  # "den" özel durumu için
    text = text.replace('"dan', "'dan")  # "dan" özel durumu için
    text = text.replace('"te', "'te")    # "te" özel durumu için
    text = text.replace('"ta', "'ta")    # "ta" özel durumu için
    
    # Tag dizisindeki tırnak işareti sorunlarını düzelt
    # Önce tag dizilerini bul: "tags": [...]
    tags_regex = r'"tags"\s*:\s*\[(.*?)\]'
    tags_match = re.search(tags_regex, text, re.DOTALL)
    if tags_match:
        tags_content = tags_match.group(1)
        # Tırnak işaretlerini düzelt (tek ve çift tırnak karışımını çöz)
        fixed_tags_content = ''
        inside_quote = False
        quote_type = None
        
        for char in tags_content:
            if char in ['"', "'"]:
                if not inside_quote:
                    # Tırnak başlangıcı
                    inside_quote = True
                    quote_type = char
                    fixed_tags_content += '"'  # Her zaman çift tırnak kullan
                elif char == quote_type:
                    # Tırnak bitişi
                    inside_quote = False
                    fixed_tags_content += '"'  # Her zaman çift tırnak kullan
                else:
                    # Farklı tipte tırnak, escape et
                    fixed_tags_content += '\\"'
            else:
                fixed_tags_content += char
        
        # Düzeltilmiş tag dizisini metne ekle
        text = re.sub(tags_regex, f'"tags": [{fixed_tags_content}]', text, flags=re.DOTALL)
    
    # Boşlukları düzelt
    text = text.strip()
    
    print(f"Düzeltilmiş JSON: {text[:100]}...")
    
    # JSON parse etmeyi dene, hata varsa manuel olarak düzelt
    try:
        json.loads(text)
    except json.JSONDecodeError as e:
        print(f"JSON ayrıştırma hatası: {e}")
        # Problemli karakterleri tespit edip düzelt
        if "line" in str(e) and "column" in str(e):
            try:
                # Hata mesajından satır ve sütun bilgisini al
                error_info = str(e)
                line_match = re.search(r'line (\d+)', error_info)
                col_match = re.search(r'column (\d+)', error_info)
                
                if line_match and col_match:
                    line = int(line_match.group(1))
                    col = int(col_match.group(1))
                    
                    # Metni satırlara böl
                    lines = text.split('\n')
                    
                    # Hatalı satırı bul
                    if 1 <= line <= len(lines):
                        problem_line = lines[line-1]
                        
                        # Sorunlu karakteri " ile değiştir
                        if col <= len(problem_line):
                            # Hata tipine göre farklı düzeltmeler
                            if "Expecting property name" in error_info:
                                # Muhtemelen bir anahtar etrafında tırnak işareti eksik
                                fixed_line = problem_line[:col-1] + '"' + problem_line[col-1:]
                            elif "Expecting ',' delimiter" in error_info:
                                # Muhtemelen bir virgül eksik
                                fixed_line = problem_line[:col] + ',' + problem_line[col:]
                            else:
                                # Genel düzeltme - tırnak işareti ekle
                                fixed_line = problem_line[:col-1] + '"' + problem_line[col:]
                            
                            lines[line-1] = fixed_line
                            
                            # Düzeltilmiş metni birleştir
                            text = '\n'.join(lines)
                            print(f"Hatalı karakter düzeltildi: {text[:100]}...")
            except Exception as fix_error:
                print(f"Karakter düzeltme hatası: {fix_error}")
    
    return text

def ensure_correct_json_structure(json_result, url, existing_title=None, existing_description=None):
    """
    Gemini AI'dan dönen JSON yapısını doğru formatta olmasını sağlar.
    
    Args:
        json_result (dict): Gemini AI'dan gelen sonuç
        url (str): İşlenen URL
        existing_title (str, optional): Mevcut başlık
        existing_description (str, optional): Mevcut açıklama
        
    Returns:
        dict: Düzeltilmiş JSON yapısı
    """
    print("JSON yapısı düzeltiliyor...")
    
    # Doğru yapıdaki JSON
    corrected_json = {
        'url': url,
        'title': existing_title or json_result.get('title', ''),
        'description': existing_description or json_result.get('description', ''),
        'main_category': '',
        'subcategory': '',
        'categories': [],
        'tags': []
    }
    
    # Eğer kullanıcı bir başlık ve açıklama vermişse, bunları kullan
    if existing_title:
        corrected_json['title'] = existing_title
    else:
        corrected_json['title'] = json_result.get('title', '')
    
    if existing_description:
        corrected_json['description'] = existing_description
    else:
        corrected_json['description'] = json_result.get('description', '')
    
    # Kategori bilgisi, çoklu kategoriler formatında mı?
    if 'categories' in json_result and isinstance(json_result['categories'], list):
        # Kategori dizisini kopyala
        corrected_json['categories'] = []
        
        for category in json_result['categories']:
            # Her bir kategori öğesi için ana ve alt kategori bilgisini kontrol et
            if isinstance(category, dict) and 'main_category' in category:
                category_item = {
                    'main_category': category['main_category']
                }
                
                if 'subcategory' in category:
                    category_item['subcategory'] = category['subcategory']
                else:
                    category_item['subcategory'] = ""
                
                # Düzeltilmiş kategorilere ekle
                corrected_json['categories'].append(category_item)
        
        # Eğer en az bir kategori varsa, ilk kategoriyi ana ve alt kategori olarak kullan
        if corrected_json['categories']:
            corrected_json['main_category'] = corrected_json['categories'][0]['main_category']
            corrected_json['subcategory'] = corrected_json['categories'][0].get('subcategory', "")
    
    else:
        # Eski tarz JSON yanıtlarından categories dizisi oluştur
        corrected_json['categories'] = []
        
        # Tek bir kategori verisi varsa ekle
        if 'main_category' in json_result and json_result['main_category']:
            category_item = {
                'main_category': json_result['main_category']
            }
            
            if 'subcategory' in json_result and json_result['subcategory']:
                category_item['subcategory'] = json_result['subcategory']
            
            corrected_json['categories'].append(category_item)
            
            # Geri uyumluluk için ayrıca tekil alanlara da ekle
            corrected_json['main_category'] = json_result['main_category']
            corrected_json['subcategory'] = json_result.get('subcategory', "")
        else:
            corrected_json['main_category'] = ""
            corrected_json['subcategory'] = ""
    
    # Etiketler kontrolü - daha sıkı kontrol ve temizleme
    if 'tags' in json_result and isinstance(json_result['tags'], list):
        # Boş olmayan ve string olan etiketleri al
        valid_tags = []
        for tag in json_result['tags']:
            if tag and isinstance(tag, str):
                # Tırnak işaretlerini temizle ve boşlukları kırp
                clean_tag = tag.strip().strip('"').strip("'").strip()
                if clean_tag:
                    valid_tags.append(clean_tag)
        
        # Varsayılan genel etiketleri temizle
        default_tags = ['içerik', 'web', 'analiz', 'sayfa']
        valid_tags = [tag for tag in valid_tags if tag.lower() not in default_tags]
        
        corrected_json['tags'] = valid_tags
        
        # Eğer etiketler boş çıktıysa başlık ve açıklamadan etiket çıkar
        if not valid_tags:
            print("Etiketler listesi boş veya sadece varsayılan etiketler içeriyor. İçerikten etiketler oluşturuluyor...")
            
            # İçerikten etiket çıkar
            from collections import Counter
            import re
            
            # Başlık ve açıklamayı birleştir
            title = corrected_json.get('title', '')
            description = corrected_json.get('description', '')
            combined_text = (title + " " + description).lower()
            
            # Noktalama işaretlerini kaldır
            combined_text = re.sub(r'[^\w\s]', ' ', combined_text)
            
            # Stopwords - genel, yaygın, anlamsız kelimeler
            stopwords = ["ve", "veya", "ile", "için", "bu", "bir", "o", "de", "da", "ki", "ne", "ya", "çok", 
                        "nasıl", "en", "içinde", "üzerinde", "arasında", "olarak", "dolayı", "kadar", "önce", 
                        "sonra", "göre", "her", "the", "and", "or", "for", "in", "on", "at", "with", "from", 
                        "to", "a", "an", "by", "is", "are", "was", "were", "içerik", "web", "analiz", "sayfa"]
            
            # Kelimelere böl
            words = combined_text.split()
            
            # Yaygın kelimeleri kaldır
            filtered_words = [word for word in words if word not in stopwords and len(word) > 3]
            
            # En sık geçen anlamlı kelimeleri bul
            word_counter = Counter(filtered_words)
            common_words = word_counter.most_common(10)
            
            # Anlamlı kelimeleri etiket olarak kullan
            content_tags = []
            for word, count in common_words:
                if len(content_tags) >= 5:  # En fazla 5 etiket
                    break
                # İlk harfi büyüt
                tag = word.capitalize()
                if tag and tag not in content_tags:
                    content_tags.append(tag)
            
            # Ana kategoriyi de etiket olarak ekle
            if corrected_json['main_category'] and corrected_json['main_category'] not in content_tags:
                content_tags.append(corrected_json['main_category'])
            
            # Alt kategoriyi de etiket olarak ekle
            if corrected_json['subcategory'] and corrected_json['subcategory'] not in content_tags:
                content_tags.append(corrected_json['subcategory'])
            
            # İçerikten çıkarılan etiketleri kullan
            if content_tags:
                corrected_json['tags'] = content_tags
                print(f"İçerikten oluşturulan etiketler: {content_tags}")
            else:
                # Gerçekten hiç ipucu bulunamadıysa, domain adını kullan
                from urllib.parse import urlparse
                domain = urlparse(url).netloc
                domain_parts = domain.split('.')
                
                # Alan adının anlamlı kısmını etiket olarak kullan (genellikle ikinci seviye domain)
                domain_tags = []
                for part in domain_parts:
                    if part not in ['www', 'com', 'net', 'org', 'io', 'co', 'gov', 'edu'] and len(part) > 2:
                        domain_tags.append(part.capitalize())
                
                if domain_tags:
                    corrected_json['tags'] = domain_tags
                    print(f"Alan adından oluşturulan etiketler: {domain_tags}")
                else:
                    # Son çare olarak URL'den ipucu çıkar
                    path_parts = urlparse(url).path.split('/')
                    path_tags = []
                    for part in path_parts:
                        if part and len(part) > 3:
                            # Tire ve alt çizgi ile ayrılmış kelimeleri ayır
                            words = re.split(r'[-_]', part)
                            for word in words:
                                if word and len(word) > 3:
                                    path_tags.append(word.capitalize())
                    
                    if path_tags:
                        corrected_json['tags'] = path_tags[:5]  # En fazla 5 etiket
                        print(f"URL yolundan oluşturulan etiketler: {path_tags[:5]}")
                    else:
                        # En son çare olarak URL temel etiketleri
                        corrected_json['tags'] = ["Site", "Web", "Sayfa", "Bilgi", "İnternet"]
                        print("Hiç ipucu bulunamadı, URL temel etiketleri kullanılıyor")
    else:
        print("Tags anahtarı bulunamadı veya liste değil, içerikten etiketler oluşturuluyor...")
        
        # İçerikten etiket çıkar
        from collections import Counter
        import re
        
        # Başlık ve açıklamayı birleştir
        title = corrected_json.get('title', '')
        description = corrected_json.get('description', '')
        combined_text = (title + " " + description).lower()
        
        # Eğer içerik çok kısaysa, kategorileri kullan
        if len(combined_text) < 20:
            content_tags = []
            
            # Ana kategoriyi etiket olarak ekle
            if corrected_json['main_category']:
                content_tags.append(corrected_json['main_category'])
            
            # Alt kategoriyi etiket olarak ekle
            if corrected_json['subcategory'] and corrected_json['subcategory'] != corrected_json['main_category']:
                content_tags.append(corrected_json['subcategory'])
                
            # URL'den ipucu çıkar
            from urllib.parse import urlparse
            domain = urlparse(url).netloc
            domain_parts = domain.split('.')
            
            # Alan adının anlamlı kısmını etiket olarak kullan
            for part in domain_parts:
                if part not in ['www', 'com', 'net', 'org', 'io', 'co', 'gov', 'edu'] and len(part) > 2:
                    content_tags.append(part.capitalize())
            
            if len(content_tags) >= 3:
                corrected_json['tags'] = content_tags[:5]  # En fazla 5 etiket
                print(f"Kategoriler ve alan adından oluşturulan etiketler: {content_tags[:5]}")
            else:
                # URL yolundan ipucu çıkar
                path_parts = urlparse(url).path.split('/')
                path_tags = []
                for part in path_parts:
                    if part and len(part) > 3:
                        # Tire ve alt çizgi ile ayrılmış kelimeleri ayır
                        words = re.split(r'[-_]', part)
                        for word in words:
                            if word and len(word) > 3:
                                path_tags.append(word.capitalize())
                
                if path_tags:
                    corrected_json['tags'] = (content_tags + path_tags)[:5]  # En fazla 5 etiket
                    print(f"Kategoriler ve URL yolundan oluşturulan etiketler: {(content_tags + path_tags)[:5]}")
                else:
                    # En son çare olarak site bazlı etiketler
                    corrected_json['tags'] = ["Site", "Web", "Sayfa", "Bilgi", "İnternet"]
                    print("Hiç ipucu bulunamadı, site bazlı etiketler kullanılıyor")
        else:
            # Noktalama işaretlerini kaldır
            combined_text = re.sub(r'[^\w\s]', ' ', combined_text)
            
            # Stopwords - genel, yaygın, anlamsız kelimeler
            stopwords = ["ve", "veya", "ile", "için", "bu", "bir", "o", "de", "da", "ki", "ne", "ya", "çok", 
                        "nasıl", "en", "içinde", "üzerinde", "arasında", "olarak", "dolayı", "kadar", "önce", 
                        "sonra", "göre", "her", "the", "and", "or", "for", "in", "on", "at", "with", "from", 
                        "to", "a", "an", "by", "is", "are", "was", "were", "içerik", "web", "analiz", "sayfa"]
            
            # Kelimelere böl
            words = combined_text.split()
            
            # Yaygın kelimeleri kaldır
            filtered_words = [word for word in words if word not in stopwords and len(word) > 3]
            
            # En sık geçen anlamlı kelimeleri bul
            word_counter = Counter(filtered_words)
            common_words = word_counter.most_common(10)
            
            # Anlamlı kelimeleri etiket olarak kullan
            content_tags = []
            for word, count in common_words:
                if len(content_tags) >= 5:  # En fazla 5 etiket
                    break
                # İlk harfi büyüt
                tag = word.capitalize()
                if tag and tag not in content_tags:
                    content_tags.append(tag)
            
            # Eğer yeterli sayıda etiket bulunamadıysa, ana ve alt kategoriyi ekle
            if len(content_tags) < 5:
                # Ana kategoriyi etiket olarak ekle
                if corrected_json['main_category'] and corrected_json['main_category'] not in content_tags:
                    content_tags.append(corrected_json['main_category'])
                
                # Alt kategoriyi etiket olarak ekle
                if corrected_json['subcategory'] and corrected_json['subcategory'] not in content_tags and corrected_json['subcategory'] != corrected_json['main_category']:
                    content_tags.append(corrected_json['subcategory'])
            
            if content_tags:
                corrected_json['tags'] = content_tags
                print(f"İçerikten oluşturulan etiketler: {content_tags}")
            else:
                # Alan adından ipucu çıkar
                from urllib.parse import urlparse
                domain = urlparse(url).netloc
                domain_parts = domain.split('.')
                
                # Alan adının anlamlı kısmını etiket olarak kullan
                domain_tags = []
                for part in domain_parts:
                    if part not in ['www', 'com', 'net', 'org', 'io', 'co', 'gov', 'edu'] and len(part) > 2:
                        domain_tags.append(part.capitalize())
                
                if domain_tags:
                    corrected_json['tags'] = domain_tags
                    print(f"Alan adından oluşturulan etiketler: {domain_tags}")
                else:
                    # Son çare olarak URL temel etiketleri
                    corrected_json['tags'] = ["Site", "Web", "Sayfa", "Bilgi", "İnternet"]
                    print("Hiç ipucu bulunamadı, URL temel etiketleri kullanılıyor")
    
    # Debug için etiketleri yazdır
    print(f"Düzeltilmiş JSON'daki etiketler: {corrected_json.get('tags', [])}")
    
    # Etiketlerden en az birini ana kategori ve alt kategori olarak kaydır
    # eğer her ikisi de boşsa ve etiketler varsa
    if (not corrected_json['main_category'] or corrected_json['main_category'] == "") and (not corrected_json['subcategory'] or corrected_json['subcategory'] == "") and corrected_json['tags'] and not corrected_json['categories']:
        # İlk etiketi ana kategori olarak kullan
        corrected_json['main_category'] = corrected_json['tags'][0]
        # Eğer birden fazla etiket varsa, ikincisini alt kategori olarak kullan
        if len(corrected_json['tags']) > 1:
            corrected_json['subcategory'] = corrected_json['tags'][1]
        
        # categories dizisini de güncelle
        corrected_json['categories'] = [{
            'main_category': corrected_json['main_category'],
            'subcategory': corrected_json.get('subcategory', "")
        }]
    
    return corrected_json

def load_image_from_file(image_path):
    """
    Dosyadan görüntü yükler ve Gemini API için uygun formata dönüştürür.
    
    Args:
        image_path (str): Görüntü dosyasının yolu
        
    Returns:
        dict: Gemini API için görüntü nesnesi
    """
    try:
        with open(image_path, "rb") as f:
            image_bytes = f.read()
        
        # Görüntü türünü belirle
        image_type = "image/jpeg"  # Varsayılan
        if image_path.lower().endswith(".png"):
            image_type = "image/png"
        elif image_path.lower().endswith(".gif"):
            image_type = "image/gif"
        elif image_path.lower().endswith(".webp"):
            image_type = "image/webp"
        
        # Gemini API için görüntü nesnesi oluştur
        image_part = {"mime_type": image_type, "data": image_bytes}
        
        return image_part
    
    except Exception as e:
        print(f"Görüntü yüklenirken hata: {e}")
        import traceback
        print(traceback.format_exc())
        return None

def extract_thumbnail_from_html(html, url):
    """
    HTML içeriğinden og:image veya twitter:image meta etiketlerini çeker ve resmi indirir.
    
    Args:
        html (str): HTML içeriği
        url (str): Sayfanın URL'si
        
    Returns:
        bytes: İndirilen resim verisi veya None
    """
    try:
        from bs4 import BeautifulSoup
        import requests
        
        soup = BeautifulSoup(html, 'html.parser')
        
        # Debug: Tüm meta etiketlerini kontrol et
        print("Tüm meta etiketleri:")
        for meta in soup.find_all('meta'):
            print(f"Meta tag: {meta}")
        
        # Farklı meta tag formatlarını dene
        image_url = None
        
        # 1. og:image property ile
        og_image = soup.find('meta', property='og:image')
        if og_image:
            print(f"og:image (property) bulundu: {og_image}")
            image_url = og_image.get('content')
        
        # 2. og:image name ile
        if not image_url:
            og_image = soup.find('meta', {'name': 'og:image'})
            if og_image:
                print(f"og:image (name) bulundu: {og_image}")
                image_url = og_image.get('content')
        
        # 3. twitter:image property ile
        if not image_url:
            twitter_image = soup.find('meta', property='twitter:image')
            if twitter_image:
                print(f"twitter:image (property) bulundu: {twitter_image}")
                image_url = twitter_image.get('content')
        
        # 4. twitter:image name ile
        if not image_url:
            twitter_image = soup.find('meta', {'name': 'twitter:image'})
            if twitter_image:
                print(f"twitter:image (name) bulundu: {twitter_image}")
                image_url = twitter_image.get('content')
        
        # 5. twitter:image:src property ile
        if not image_url:
            twitter_image = soup.find('meta', property='twitter:image:src')
            if twitter_image:
                print(f"twitter:image:src (property) bulundu: {twitter_image}")
                image_url = twitter_image.get('content')
        
        # 6. image_src link ile
        if not image_url:
            image_link = soup.find('link', {'rel': 'image_src'})
            if image_link:
                print(f"image_src link bulundu: {image_link}")
                image_url = image_link.get('href')
        
        if not image_url:
            print("Hiçbir meta image etiketi bulunamadı")
            return None
        
        print(f"Bulunan image URL: {image_url}")
        
        # Göreceli URL'yi mutlak URL'ye çevir
        if image_url and not image_url.startswith(('http://', 'https://')):
            from urllib.parse import urljoin
            image_url = urljoin(url, image_url)
            print(f"Mutlak URL'ye çevrildi: {image_url}")
        
        # Resmi indir
        if image_url:
            print(f"Resim indiriliyor: {image_url}")
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
                "Accept": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8",
                "Accept-Language": "en-US,en;q=0.5",
                "Accept-Encoding": "gzip, deflate, br",
                "Connection": "keep-alive",
                "DNT": "1"
            }
            response = requests.get(image_url, headers=headers, timeout=10)
            print(f"İndirme durumu: {response.status_code}")
            if response.status_code == 200:
                return response.content
        
        return None
        
    except Exception as e:
        print(f"Thumbnail çekilirken hata: {e}")
        import traceback
        print(traceback.format_exc())
        return None

if __name__ == "__main__":
    # Test için
    api_key = load_api_key()
    print(f"API Key: {api_key[:5]}..." if api_key else "API Key not found")
    
    # JSON düzeltme testi
    test_json = "```json\n{'title': 'Test Title', 'description': 'Test Description'}\n```"
    corrected = correct_json_format(test_json)
    print(f"Corrected JSON: {corrected}")
    
    # JSON yapısı düzeltme testi
    test_result = {"title": "Test Title"}
    corrected_structure = ensure_correct_json_structure(test_result, "https://example.com")
    print(f"Corrected structure: {corrected_structure}") 